#!/usr/bin/env python3
"""
üìä Database Manager –¥–ª—è War:Observe
–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É —Å–∞–π—Ç—É
"""
import asyncio
import json
from datetime import datetime
from backend.database import (
    news_articles_crud, team_members_crud, research_projects_crud,
    partners_crud, resources_crud, job_openings_crud, 
    testimonials_crud, faqs_crud, donations_crud, database
)

class DatabaseManager:
    def __init__(self):
        self.collections = {
            '1': ('news_articles', news_articles_crud, '–ù–æ–≤–∏–Ω–∏'),
            '2': ('team_members', team_members_crud, '–ö–æ–º–∞–Ω–¥–∞'), 
            '3': ('research_projects', research_projects_crud, '–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è'),
            '4': ('partners', partners_crud, '–ü–∞—Ä—Ç–Ω–µ—Ä–∏'),
            '5': ('resources', resources_crud, '–†–µ—Å—É—Ä—Å–∏'),
            '6': ('job_openings', job_openings_crud, '–í–∞–∫–∞–Ω—Å—ñ—ó'),
            '7': ('testimonials', testimonials_crud, '–í—ñ–¥–≥—É–∫–∏'),
            '8': ('faq', faqs_crud, 'FAQ'),
            '9': ('donations', donations_crud, '–î–æ–Ω–∞—Ü—ñ—ó')
        }

    async def show_menu(self):
        """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
        print("\n" + "="*50)
        print("üéØ WAR:OBSERVE DATABASE MANAGER")
        print("="*50)
        print("–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª–µ–∫—Ü—ñ—é –¥–ª—è —Ä–æ–±–æ—Ç–∏:")
        
        for key, (col_name, crud, display_name) in self.collections.items():
            count = await database.db[col_name].count_documents({})
            print(f"{key}. {display_name} ({count} –∑–∞–ø–∏—Å—ñ–≤)")
        
        print("\n0. –í–∏—Ö—ñ–¥")
        print("h. –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Å—ñ—Ö –∫–æ–ª–µ–∫—Ü—ñ–π")

    async def show_collection_structure(self):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Å—ñ—Ö –∫–æ–ª–µ–∫—Ü—ñ–π"""
        print("\nüìã –°–¢–†–£–ö–¢–£–†–ê –ö–û–õ–ï–ö–¶–Ü–ô:")
        structures = {
            'news_articles': ['title', 'excerpt', 'content', 'author', 'publishedDate', 'category', 'imageUrl', 'tags'],
            'team_members': ['name', 'position', 'email', 'image', 'bio', 'joinDate'],
            'research_projects': ['title', 'description', 'status', 'startDate', 'endDate', 'teamLead', 'technologies'],
            'partners': ['name', 'description', 'website', 'logo', 'type'],
            'resources': ['title', 'description', 'fileUrl', 'type', 'category', 'downloadCount'],
            'job_openings': ['title', 'description', 'requirements', 'location', 'type', 'salary'],
            'testimonials': ['clientName', 'clientPosition', 'content', 'rating', 'projectType'],
            'faq': ['question', 'answer', 'category', 'order'],
            'donations': ['donorName', 'donorEmail', 'amount', 'tier', 'status']
        }
        
        for col_name, fields in structures.items():
            print(f"\nüîπ {col_name}:")
            print("   –ü–æ–ª—è: " + ", ".join(fields))

    async def manage_collection(self, collection_key):
        """–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—é –∫–æ–ª–µ–∫—Ü—ñ—î—é"""
        if collection_key not in self.collections:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!")
            return
        
        col_name, crud, display_name = self.collections[collection_key]
        
        while True:
            print(f"\nüìÅ –ö–µ—Ä—É–≤–∞–Ω–Ω—è: {display_name}")
            print("-" * 30)
            print("1. –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏")
            print("2. –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å")
            print("3. –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å")
            print("4. –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å")
            print("5. –ü–æ—à—É–∫ –∑–∞–ø–∏—Å—ñ–≤")
            print("0. –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
            
            choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä: ").strip()
            
            if choice == '0':
                break
            elif choice == '1':
                await self.show_all_records(crud, display_name)
            elif choice == '2':
                await self.add_record(crud, col_name, display_name)
            elif choice == '3':
                await self.edit_record(crud, display_name)
            elif choice == '4':
                await self.delete_record(crud, display_name)
            elif choice == '5':
                await self.search_records(crud, display_name)
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!")

    async def show_all_records(self, crud, display_name):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏"""
        try:
            records = await crud.get_all(limit=50)
            print(f"\nüìã –í—Å—ñ –∑–∞–ø–∏—Å–∏ –≤ {display_name}:")
            print("-" * 50)
            
            if not records:
                print("üì≠ –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤")
                return
            
            for i, record in enumerate(records, 1):
                # –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
                print(f"\n{i}. ID: {record.get('id', record.get('_id'))}")
                
                if 'title' in record:
                    print(f"   –ù–∞–∑–≤–∞: {record['title']}")
                elif 'name' in record:
                    print(f"   –Ü–º'—è: {record['name']}")
                elif 'question' in record:
                    print(f"   –ü–∏—Ç–∞–Ω–Ω—è: {record['question'][:50]}...")
                elif 'donorName' in record:
                    print(f"   –î–æ–Ω–æ—Ä: {record['donorName']} - ‚Ç¨{record['amount']}")
                
                if 'createdAt' in record:
                    print(f"   –°—Ç–≤–æ—Ä–µ–Ω–æ: {record['createdAt']}")
                    
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    async def add_record(self, crud, col_name, display_name):
        """–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å"""
        print(f"\n‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É –≤ {display_name}")
        
        # –®–∞–±–ª–æ–Ω–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∑–∞–ø–∏—Å—ñ–≤
        templates = await self.get_record_template(col_name)
        
        if not templates:
            print("‚ùå –®–∞–±–ª–æ–Ω –¥–ª—è —Ü—ñ—î—ó –∫–æ–ª–µ–∫—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print("\nüìù –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –ø–æ–ª—è (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤):")
        new_record = {}
        
        for field, (field_type, required, default_value) in templates.items():
            while True:
                prompt = f"{field} ({field_type})"
                if required:
                    prompt += " *–æ–±–æ–≤'—è–∑–∫–æ–≤–æ*"
                if default_value:
                    prompt += f" [default: {default_value}]"
                prompt += ": "
                
                value = input(prompt).strip()
                
                if not value and default_value:
                    value = default_value
                
                if required and not value:
                    print("‚ùå –¶–µ –ø–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ!")
                    continue
                
                if value:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Ç–∏–ø—ñ–≤
                    if field_type == 'datetime' and value:
                        try:
                            value = datetime.fromisoformat(value.replace('Z', '+00:00'))
                        except:
                            try:
                                value = datetime.strptime(value, '%Y-%m-%d')
                            except:
                                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ YYYY-MM-DD")
                                continue
                    elif field_type == 'list' and value:
                        value = [item.strip() for item in value.split(',')]
                    elif field_type == 'int' and value:
                        try:
                            value = int(value)
                        except:
                            print("‚ùå –ú–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ")
                            continue
                    elif field_type == 'float' and value:
                        try:
                            value = float(value)
                        except:
                            print("‚ùå –ú–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ –∑ –∫–æ–º–æ—é")
                            continue
                    elif field_type == 'bool' and value:
                        value = value.lower() in ('true', 'yes', '1', '—Ç–∞–∫')
                
                new_record[field] = value
                break
        
        try:
            result = await crud.create(new_record)
            print(f"‚úÖ –ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! ID: {result.get('id', result.get('_id'))}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {e}")

    async def edit_record(self, crud, display_name):
        """–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å"""
        record_id = input(f"\n‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å ID –∑–∞–ø–∏—Å—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤ {display_name}: ").strip()
        
        try:
            record = await crud.get_by_id(record_id)
            if not record:
                print("‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                return
            
            print("\nüìã –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ:")
            for key, value in record.items():
                if key not in ['_id', 'createdAt', 'updatedAt']:
                    print(f"   {key}: {value}")
            
            print("\n‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (Enter –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ):")
            updates = {}
            
            for key, value in record.items():
                if key not in ['_id', 'id', 'createdAt', 'updatedAt']:
                    new_value = input(f"{key} [{value}]: ").strip()
                    if new_value:
                        # –ü—Ä–æ—Å—Ç–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–∏–ø—ñ–≤
                        if isinstance(value, bool):
                            new_value = new_value.lower() in ('true', 'yes', '1', '—Ç–∞–∫')
                        elif isinstance(value, int):
                            try:
                                new_value = int(new_value)
                            except:
                                print(f"‚ùå –ù–µ–≤—ñ—Ä–Ω–µ —á–∏—Å–ª–æ –¥–ª—è {key}, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                                continue
                        elif isinstance(value, float):
                            try:
                                new_value = float(new_value)
                            except:
                                print(f"‚ùå –ù–µ–≤—ñ—Ä–Ω–µ —á–∏—Å–ª–æ –¥–ª—è {key}, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                                continue
                        elif isinstance(value, list):
                            new_value = [item.strip() for item in new_value.split(',')]
                        
                        updates[key] = new_value
            
            if updates:
                await crud.update(record_id, updates)
                print("‚úÖ –ó–∞–ø–∏—Å –æ–Ω–æ–≤–ª–µ–Ω–æ!")
            else:
                print("‚ÑπÔ∏è –ñ–æ–¥–Ω–∏—Ö –∑–º—ñ–Ω –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    async def delete_record(self, crud, display_name):
        """–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å"""
        record_id = input(f"\nüóëÔ∏è –í–≤–µ–¥—ñ—Ç—å ID –∑–∞–ø–∏—Å—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ {display_name}: ").strip()
        
        try:
            record = await crud.get_by_id(record_id)
            if not record:
                print("‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                return
            
            # –ü–æ–∫–∞–∑—É—î–º–æ —â–æ –±—É–¥–µ–º–æ –≤–∏–¥–∞–ª—è—Ç–∏
            print("\n‚ö†Ô∏è –í–∏ –∑–±–∏—Ä–∞—î—Ç–µ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏:")
            for key, value in record.items():
                if key in ['title', 'name', 'question', 'donorName']:
                    print(f"   {key}: {value}")
            
            confirm = input("\n‚ùì –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è? (yes/—Ç–∞–∫): ").strip().lower()
            if confirm in ('yes', '—Ç–∞–∫', 'y'):
                success = await crud.delete(record_id)
                if success:
                    print("‚úÖ –ó–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ!")
                else:
                    print("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
            else:
                print("‚ÑπÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    async def search_records(self, crud, display_name):
        """–ü–æ—à—É–∫ –∑–∞–ø–∏—Å—ñ–≤"""
        query = input(f"\nüîç –í–≤–µ–¥—ñ—Ç—å –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è {display_name}: ").strip()
        
        if not query:
            print("‚ùå –ü—É—Å—Ç–∏–π –∑–∞–ø–∏—Ç!")
            return
        
        try:
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ–ª—è –¥–ª—è –ø–æ—à—É–∫—É
            search_fields = ['title', 'name', 'content', 'description', 'question']
            results = await crud.search(query, search_fields, limit=20)
            
            print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É '{query}':")
            print("-" * 50)
            
            if not results:
                print("üì≠ –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return
            
            for i, record in enumerate(results, 1):
                print(f"\n{i}. ID: {record.get('id', record.get('_id'))}")
                if 'title' in record:
                    print(f"   –ù–∞–∑–≤–∞: {record['title']}")
                elif 'name' in record:
                    print(f"   –Ü–º'—è: {record['name']}")
                elif 'question' in record:
                    print(f"   –ü–∏—Ç–∞–Ω–Ω—è: {record['question']}")
                    
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {e}")

    async def get_record_template(self, col_name):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —à–∞–±–ª–æ–Ω –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É"""
        templates = {
            'news_articles': {
                'title': ('string', True, None),
                'excerpt': ('string', True, None),
                'content': ('string', True, None),
                'author': ('string', True, None),
                'publishedDate': ('datetime', True, None),
                'category': ('string', True, 'Analysis'),
                'imageUrl': ('string', True, None),
                'tags': ('list', False, None)
            },
            'team_members': {
                'name': ('string', True, None),
                'position': ('string', True, None),
                'email': ('string', True, None),
                'image': ('string', True, None),
                'bio': ('string', True, None),
                'joinDate': ('datetime', True, None)
            },
            'research_projects': {
                'title': ('string', True, None),
                'description': ('string', True, None),
                'status': ('string', True, 'active'),
                'startDate': ('datetime', True, None),
                'endDate': ('datetime', False, None),
                'teamLead': ('string', True, None),
                'technologies': ('list', False, None)
            },
            'partners': {
                'name': ('string', True, None),
                'description': ('string', True, None),
                'website': ('string', True, None),
                'logo': ('string', True, None),
                'type': ('string', True, 'Organization')
            },
            'resources': {
                'title': ('string', True, None),
                'description': ('string', True, None),
                'fileUrl': ('string', True, None),
                'type': ('string', True, 'PDF'),
                'category': ('string', True, 'Research'),
                'downloadCount': ('int', False, 0)
            },
            'job_openings': {
                'title': ('string', True, None),
                'description': ('string', True, None),
                'requirements': ('string', True, None),
                'location': ('string', True, 'Remote'),
                'type': ('string', True, 'Full-time'),
                'salary': ('string', False, 'Competitive')
            },
            'testimonials': {
                'clientName': ('string', True, None),
                'clientPosition': ('string', True, None),
                'content': ('string', True, None),
                'rating': ('int', True, 5),
                'projectType': ('string', True, 'Research')
            },
            'faq': {
                'question': ('string', True, None),
                'answer': ('string', True, None),
                'category': ('string', True, 'General'),
                'order': ('int', False, 0)
            },
            'donations': {
                'donorName': ('string', True, None),
                'donorEmail': ('string', True, None),
                'amount': ('float', True, None),
                'tier': ('string', True, 'Supporter')
            }
        }
        
        return templates.get(col_name, {})

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        while True:
            await self.show_menu()
            choice = input("\nüëâ –í–∞—à –≤–∏–±—ñ—Ä: ").strip()
            
            if choice == '0':
                print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
            elif choice == 'h':
                await self.show_collection_structure()
            elif choice in self.collections:
                await self.manage_collection(choice)
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    manager = DatabaseManager()
    await manager.run()

if __name__ == "__main__":
    asyncio.run(main())